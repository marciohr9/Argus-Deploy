---
# Role: project_deploy (multi-projetos)

# Coleta lista de projetos pela ENV PROJECTS
- name: Captura IDs de projetos a partir da ENV PROJECTS
  ansible.builtin.set_fact:
    _project_ids: >-
      {{
        (lookup('env','PROJECTS') | default('', true))
        | regex_replace('\\s+', '')
        | split(',')
        | reject('equalto','')
        | list
      }}

- name: Falha se nenhum projeto foi definido
  ansible.builtin.assert:
    that:
      - _project_ids | length > 0
    fail_msg: >-
      Nenhum projeto encontrado. Defina PROJECTS="id1,id2" e as ENVs <ID>__REPO_URL, etc.

# Valida token do GitHub (vem do group_vars/all.yml ou ENV GITHUB_TOKEN)
- name: Valida github_token caso haja projetos em PROJECTS
  when: _project_ids | length > 0
  ansible.builtin.assert:
    that:
      - github_token | length > 0
    fail_msg: "Defina github_token em group_vars/all.yml (ou GITHUB_TOKEN no ambiente) para clonar via HTTPS."
    success_msg: "GITHUB_TOKEN definido para deploy."

# Inicializa lista agregada
- name: Inicializa lista de projetos
  ansible.builtin.set_fact:
    _projects: []

# Monta cada projeto a partir das ENVs
- name: Monta estrutura de cada projeto a partir das ENVs
  vars:
    _ID:  "{{ item }}"
    _IDU: "{{ item | regex_replace('[^A-Za-z0-9_]', '_') | upper }}"
    _default_dir: "{{ base_opt_dir | default('/opt') ~ '/' ~ item }}"
    _env_src_default: "./{{ item }}.env"
  ansible.builtin.set_fact:
    _projects: "{{ (_projects | default([])) + [ {
        'id': _ID,
        'name':          (lookup('env', _IDU ~ '__PROJECT_NAME')         | default(_ID, true)),
        'repo_url':      (lookup('env', _IDU ~ '__REPO_URL')             | default('', true)),
        'version':       (lookup('env', _IDU ~ '__VERSION')              | default('HEAD', true)),
        'dir':           (lookup('env', _IDU ~ '__PROJECT_DIR')          | default(_default_dir, true)),
        'compose_path':  (lookup('env', _IDU ~ '__COMPOSE_PATH')         | default('docker-compose.yml', true)),
        'env_src':       (lookup('env', _IDU ~ '__ENV_SRC')              | default(_env_src_default, true))
      } ] }}"
  loop: "{{ _project_ids }}"
  no_log: true

# debug só quando -v ou mais
- name: Lista projetos carregados
  ansible.builtin.debug:
    var: _projects
  when: (ansible_verbosity | int) >= 1

# Valida se todos os projetos têm REPO_URL
- name: Valida que todos os projetos possuem REPO_URL
  vars:
    _missing: "{{ _projects | selectattr('repo_url', 'equalto', '') | map(attribute='id') | list }}"
  ansible.builtin.assert:
    that:
      - _projects | length > 0
      - _missing | length == 0
    fail_msg: "Faltam REPO_URL para: {{ _missing | join(', ') }}. Defina <ID>__REPO_URL para cada ID em PROJECTS."
    success_msg: "Todos os projetos possuem REPO_URL."

# Descobre se a network 'proxy' existe (uma vez)
- name: Verifica se a network externa '{{ proxy_network_name }}' existe no Docker
  community.docker.docker_network_info:
    name: "{{ proxy_network_name }}"
  register: _proxy_net
  changed_when: false
  failed_when: false

- name: Define flag global de existência da network 'proxy'
  ansible.builtin.set_fact:
    proxy_network_exists: >-
      {{ (_proxy_net.exists is defined and _proxy_net.exists)
         or ((_proxy_net.networks | default([])) | length > 0) }}

- name: Aviso quando a network '{{ proxy_network_name }}' não existe
  ansible.builtin.debug:
    msg: >
      A network '{{ proxy_network_name }}' não existe. Os docker-compose.yml
      não serão alterados para incluir essa rede. Crie-a (ex.: role 'traefik')
      com: docker network create {{ proxy_network_name }}.
  when: not proxy_network_exists

# Processa cada projeto
- name: Processa cada projeto (clone -> .env -> patch -> build/up -> health)
  ansible.builtin.include_tasks: "_per_project.yml"
  loop: "{{ _projects }}"
  loop_control:
    loop_var: project
    label: "{{ project.id }}"

# Reinicia Traefik ao final do deploy (atualiza TLS/rotas)
- name: Reinicia Traefik após deploy dos projetos
  when: restart_traefik_after_deploy | default(true)
  run_once: true
  block:
    - name: Localiza containers Traefik por labels do Compose
      community.docker.docker_host_info:
        containers: true
        containers_filters:
          label:
            - "com.docker.compose.project={{ traefik_compose_project | default('traefik') }}"
            - "com.docker.compose.service=traefik"
      register: _traefik_info
      changed_when: false
      failed_when: false

    - name: Extrai nomes dos containers Traefik (normaliza)
      ansible.builtin.set_fact:
        _traefik_container_names: >-
          {{
            (_traefik_info.containers | default([]))
            | map(attribute='Name')
            | map('default','')
            | map('regex_replace','^/','')
            | reject('equalto','')
            | list
            | unique
          }}

    - name: Reinicia Traefik
      when: (_traefik_container_names | length) > 0
      community.docker.docker_container:
        name: "{{ item }}"
        state: started
        restart: true
      loop: "{{ _traefik_container_names }}"
      loop_control:
        label: "{{ item }}"

    - name: Traefik não encontrado – nada a reiniciar
      when: (_traefik_container_names | default([]) | length) == 0
      ansible.builtin.debug:
        msg: "Traefik não localizado por labels (project={{ traefik_compose_project | default('traefik') }}, service=traefik). Nenhuma ação tomada."

